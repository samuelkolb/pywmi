def main(){
	a := [1,2,3,4,5,6];
	b := a[1..3];
	assert(b[0]==2 && b[1]==3);
	x := (1,2,3,4,5,6);
	y := x[1..3];
	assert(y[0]==2&&y[1]==3);
	l := uniformInt(0,a.length);
	r := uniformInt(l,a.length);
	assert(0<=l&&l<=r&&r<=a.length);
	return a[l..r].length; // expected: ((1/14·δ(0)[length]+1/14·δ(1)[length])·[-1+length≤0]·[-⌊length⌋+length=0]+(1/21·δ(0)[length]+1/21·δ(1)[length]+1/21·δ(2)[length])·[-2+length≤0]·[-⌊length⌋+length=0]+(1/28·δ(0)[length]+1/28·δ(1)[length]+1/28·δ(2)[length]+1/28·δ(3)[length])·[-3+length≤0]·[-⌊length⌋+length=0]+(1/35·δ(0)[length]+1/35·δ(1)[length]+1/35·δ(2)[length]+1/35·δ(3)[length]+1/35·δ(4)[length])·[-4+length≤0]·[-⌊length⌋+length=0]+(1/42·δ(0)[length]+1/42·δ(1)[length]+1/42·δ(2)[length]+1/42·δ(3)[length]+1/42·δ(4)[length]+1/42·δ(5)[length])·[-5+length≤0]·[-⌊length⌋+length=0]+(1/49·δ(0)[length]+1/49·δ(1)[length]+1/49·δ(2)[length]+1/49·δ(3)[length]+1/49·δ(4)[length]+1/49·δ(5)[length]+1/49·δ(6)[length])·[-6+length≤0]·[-⌊length⌋+length=0]+(∑_ξ₁δ(-6)[-ξ₁+length])·1/7·[length=0])·[-length+⌈length⌉=0]·[-length≤0]
	// TODO: completely eliminate bounds checks in the result
}
