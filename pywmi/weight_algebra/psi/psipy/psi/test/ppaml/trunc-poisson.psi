// skipped 
def main(){
    bound := 3;
    lambda := 4;
    L := sampleFrom("(L)=>δ(0)[L-e^(-lambda)]"); // TODO: add constant e
    p := 1;
    r := -1;
    for k in [0..bound){
	if r==-1{
	    p = p*uniform(0,1);
	    if p <= L{ r = k; }
	}
    }
    return r; // expected: ((([-1+⅟e⁴≤0]·[-12·⅟e⁴+1+12·[-e⁴+1≤0]·⅟e⁴≠0]·[-⅟e⁴+1≠0]·⅟e⁴+[-13·[-⅟e⁴+1=0]·⅟e⁴+12·[-e⁴+1≤0]·⅟e⁴+2·[-⅟e⁴+1=0]+[-⅟e⁴+1≠0]≠0]·[-⅟e⁴+1≤0])·δ(0)[r]+4·[-13·[-1+⅟e⁴≤0]·⅟e⁴+12·⅟e⁴+2·[-⅟e⁴+1=0]+[-1+⅟e⁴≤0]·[-⅟e⁴+1≠0]·⅟e⁴+[-⅟e⁴+1≠0]≠0]·[-e⁴+1≤0]·δ(1)[r]·⅟e⁴)·[-1+-r≠0]+(-13·[-1+⅟e⁴≤0]·[-13·⅟e⁴+12·[-e⁴+1≤0]·⅟e⁴+2·[-⅟e⁴+1=0]+[-⅟e⁴+1≠0]+[-⅟e⁴+1≠0]·⅟e⁴≠0]·⅟e⁴+[-1+⅟e⁴≤0]·[-13·⅟e⁴+12·[-e⁴+1≤0]·⅟e⁴+2·[-⅟e⁴+1=0]+[-⅟e⁴+1≠0]+[-⅟e⁴+1≠0]·⅟e⁴≠0])·δ(-1)[r]+8·[-13·[-1+⅟e⁴≤0]·⅟e⁴+12·⅟e⁴+2·[-⅟e⁴+1=0]+[-1+⅟e⁴≤0]·[-⅟e⁴+1≠0]·⅟e⁴+[-⅟e⁴+1≠0]≠0]·[-e⁴+1≤0]·δ(2)[r]·⅟e⁴)·([-1+e⁴≠0]·[-1+e⁴≤0]·[-1+⅟e⁴≤0]·[-⅟e⁴+1≠0]·⅟(-12·⅟e⁴+1)+[-1+e⁴≠0]·[-1+e⁴≤0]·[-⅟e⁴+1=0]·⅟(-13·⅟e⁴+2)+[-1+e⁴≠0]·[-1+e⁴≤0]·[-⅟e⁴+1≠0]·[-⅟e⁴+1≤0]+[-1+⅟e⁴≤0]·[-e⁴+1≤0]·[-⅟e⁴+1≠0]+[-e⁴+1≤0]·[-⅟e⁴+1=0]·⅟(-⅟e⁴+2)+[-e⁴+1≤0]·[-⅟e⁴+1≠0]·[-⅟e⁴+1≤0]·⅟(1+12·⅟e⁴))
	// TODO: simplify better?
    /+lambda := 1;
    L := sampleFrom("(L)=>δ(0)[L-e^(-lambda)]"); // TODO: add constant e
    u1 := uniform(0,1);
    assert(u1>L);
    u2 := u1*uniform(0,1);
    assert(u2>L);
    u3 := u2*uniform(0,1);
    assert(u3>L);
    u4 := u3*uniform(0,1);
    assert(u4>L);
    u5 := u4*uniform(0,1);
    assert(u5>L);
    u6 := u5*uniform(0,1);
    assert(u6<=L);
    return (); // expected: 1/120·[-1+⅟e≤0]·⅟e+/
}
